#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# fakeroute
#
# fakeroute intercept traceroute-like probes in order to simulate various
# topologies, including multipath due to per-flow load balancers.
#
# Authors: Jordan Augé       <jordan.auge@lip6.fr>
#          Marc-Olivier Buob <marc-olivier.buob@lip6.fr> 
#
# Copyright (C)2011-2013, UPMC Sorbonnes Universités / LIP6
#
#
# This program is free software; you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation; either version 3, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
# details.
# 
# You should have received a copy of the GNU General Public License along with
# this program; see the file COPYING.  If not, write to the Free Software
# Foundation, 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
#
# TODO:
#  - fix WITH_THREADS code
#  - improve Load Balancer support (configuration, per-packet and
#    per-destination load balancers)
#  - add the possibility to fuzz ICMP replies
#  - alternative dependency on Scapy ?

WITH_THREADS = False

from dpkt.ip    import IP
from dpkt.icmp  import ICMP
from dpkt.ip6   import IP6
from dpkt.icmp6 import ICMP6
from common     import get_cfg_path, get_handled_files, str_ip_get_version

import dpkt, socket, sys, threading, zlib

try:
    from netfilterqueue import NetfilterQueue
    HAS_NFQUEUE = True
except:
    import nfqueue
    HAS_NFQUEUE = False

#-----------------------------------------------------------------
# Constants
#-----------------------------------------------------------------

# Netfilter queue-nums
QUEUE_NUM_IPV4 = 1
QUEUE_NUM_IPV6 = 0

# (IP, port) targets for IPv4 and IPv6 replies
TARGET_IPV4 = ("127.0.0.1", 0)
TARGET_IPV6 = ("::1", 0)

#-----------------------------------------------------------------
# Messages
#-----------------------------------------------------------------

ERR_INVALID_PARAMETER = "E: Invalid parameter (%r)"
ERR_INVALID_IP        = "E: Invalid IP (%r) (size = %r)"

WNG_NETFILTER = """
W: python-netfilter module not found.
You will need to add iptables rules manually so that incoming packets are sent to
the QUEUE target in order to be processed by this program.
"""

WNG_CLEAN_IPTABLES    = """
W: Remember to remove any iptables rules you might have added.
Examples:
    iptables  -F OUTPUT
    ip6tables -F OUTPUT
"""

INF_ADD_IPTABLES      = "I: Adding iptables rules for handled destinations (see \"iptables -nL\" and \"ip6tables -nL\")"
INF_DEL_IPTABLES      = "I: Removing previously added ip%stables rules"
INF_RUNNING           = "I: Running..."
INF_RUNNING_DEFAULT   = "I: You should run either '%s -4' or either '%s -6'. Default set to '-4'"
INF_RUNNING_IPV4      = "I: Handling IPv4 probe packets..."
INF_RUNNING_IPV6      = "I: Handling IPv6 prove packets..."
INF_TERMINATED        = "I: Fakeroute terminated."

#-----------------------------------------------------------------
# Global variables used in cb4() and cb6()
#-----------------------------------------------------------------

# Socket use to send IPv4 replies
sock4 = socket.socket(socket.AF_INET,  socket.SOCK_RAW, socket.IPPROTO_RAW)

# Socket use to send IPv6 replies
sock6 = socket.socket(socket.AF_INET6, socket.SOCK_RAW, socket.IPPROTO_RAW)

# Emulated network topology
hopmap = dict()

#-----------------------------------------------------------------
# Load fakeroute file
#-----------------------------------------------------------------

def parse_file(dst_ip, filename, hopmap):
    """
    \brief Parse a fakeroute file in order to enrich hopmap.
    \param dst_ip The target IP captured by traceroute.
    \param hopmap The hopmap to enrich. You can pass an empty dictionnary.
        hopmap maps a target IP (captured by traceroute) with the corresponding
        emulated IP graph.
    """
    f = open(filename, 'r')
    succ = {}
    desc = None
    lines = f.readlines()
    for line in lines:
        line = line.strip()
        if not line:
            continue
        if line[0] == '#':
            if "DESC" in line:
                desc = line[line.index("DESC") + 4:].strip()
            continue
        k, v = line.split()
        if k not in succ:
            succ[k] = [v]
        else:
            succ[k].append(v)
    print "   [ %32s ] %s" % (dst_ip, desc if desc else "(No description)")
    f.close()
    hopmap[dst_ip] = succ

def update_hopmap(handled, hopmap):
    """
    \brief Enrich hopmap according to handled
    \param handled A dictionnary {String: String} which maps for a target IP
        (captured by fakeroute) the corresponding filename containing the
        emulated topology.
    \param hopmap The hopmap to enrich. You can pass an empty dictionnary.
        hopmap maps a target IP (captured by traceroute) with the corresponding
        emulated IP graph.
    """
    for dst_ip, filename in handled.items():
        parse_file(dst_ip, filename, hopmap)

#-----------------------------------------------------------------
# NFQueue abstraction
#-----------------------------------------------------------------

def nfq_get_payload(packet):
    if HAS_NFQUEUE:
        return packet.get_payload()
    else:
        return packet.get_data()

def nfq_accept(packet):
    if HAS_NFQUEUE:
        packet.accept()
    else:
        packet.set_verdict(nfqueue.NF_ACCEPT)

def nfq_drop(packet):
    if HAS_NFQUEUE:
        packet.drop()
    else:
        packet.set_verdict(nfqueue.NF_DROP) # drop original packet

def queue_make(callback, is_ipv6):
    """
    \brief Create a queue binded to an appropriate socket.
    \param callback This function is called whenever this
        socket receives a packet/
    \param is_ipv6 Pass True iif this is an IPv6 queue, False
        iif this is an IPv4 queue
    \return The corresponding queue
    """
    queue_num = QUEUE_NUM_IPV6 if is_ipv6 else QUEUE_NUM_IPV4
    if HAS_NFQUEUE:
        queue = NetfilterQueue()
        queue.bind(queue_num, callback)
    else:
        queue = nfqueue.queue()
        queue.open()
        queue.bind(socket.AF_INET6 if is_ipv6 else socket.AF_INET)
        queue.set_callback(callback)
        queue.create_queue(queue_num)
    return queue

def queue_run(queue):
    """
    \brief Run queue
    \param queue to be run
    """
    if HAS_NFQUEUE:
        queue.run()
    else:
        queue.try_run()

def queue_close(queue, is_ipv6):
    """
    \brief Close queue
    \param queue The queue to be closed
    \param is_ipv6 Pass True iif this is an IPv6 queue, False
        iif this is an IPv4 queue
    """
    if HAS_NFQUEUE:
        queue.unbind()
    else:
        queue.unbind(socket.AF_INET6 if is_ipv6 else socket.AF_INET)
        queue.close()

#-----------------------------------------------------------------
# IPv4/IPv6 abstraction 
#-----------------------------------------------------------------

# IP layer 

def packet_get_version(packet):
    if isinstance(packet, IP):
        return socket.AF_INET
    elif isinstance(packet, IP6):
        return socket.AF_INET6
    raise ValueError(ERR_INVALID_PARAMETER % packet)

def packet_get_ttl(packet):
    """
    \brief Retrieve the TTL of an IP packet
    \param packet an dpkt.IP or dpkt.IP6 instance
    """
    ip_version = packet_get_version(packet)
    if ip_version == socket.AF_INET: 
        return packet.ttl
    elif ip_version == socket.AF_INET6: 
        return packet.hlim
    raise ValueError(ERR_INVALID_PARAMETER % packet)

def packet_set_ttl(packet, ttl):
    """
    \brief Set TTL of an IP packet
    \param packet an dpkt.IP or dpkt.IP6 instance
    """
    ip_version = packet_get_version(packet)
    if ip_version == socket.AF_INET: 
        packet.ttl = ttl
    elif ip_version == socket.AF_INET6: 
        packet.hlim = ttl
    else:
        raise ValueError(ERR_INVALID_PARAMETER % packet)

def packet_get_src_ip(packet):
    """
    \return Source IP of the packet (binary)
    \param packet an dpkt.IP or dpkt.IP6 instance
    """
    return packet.src

def packet_get_dst_ip(packet):
    """
    \param packet an dpkt.IP or dpkt.IP6 instance
    \return Destination IP of the IP packet (binary)
    """
    return packet.dst

def ip_get_version(ip):
    """
    \brief Guess the IP version of a given ip
    \param ip An IP address (binary)
    \return 4 if ip is an IPv4, 6 if ip is an IPv6
    """
    size_ip = len(str(ip))
    if size_ip == 16:  # IPv6
        return socket.AF_INET6
    elif size_ip == 4: # IPv4
        return socket.AF_INET
    raise ValueError(ERR_INVALID_IP % (ip, size_ip))

def str_to_ip(ip):
    """
    \param ip An IP address (human readable string)
    \return The corresponding IP address (binary) 
    """
    try: # IPv6 ?
        return socket.inet_pton(socket.AF_INET6, ip)
    except socket.error:
        pass
    try: # IPv4 ?
        return socket.inet_pton(socket.AF_INET, ip)
    except socket.error:
        pass
    raise ValueError(ERR_INVALID_IP % (ip, size_ip))

def ip_to_str(ip):
    """
    \param ip An IP address (binary)
    \return The human-readable string related to an IP
    """
    return socket.inet_ntop(ip_get_version(ip), ip)

def packet_get_flow_id(packet):
    """
    \param packet an dpkt.IP or dpkt.IP6 instance
    \return The flow-id related to an IP packet
    """
    ip_version = packet_get_version(packet)
    if ip_version == socket.AF_INET: 
        if packet.p in [dpkt.ip.IP_PROTO_UDP, dpkt.ip.IP_PROTO_TCP]:
            return "%s%s%s%s%s" % (
                packet.src,
                packet.dst,
                packet.data.sport,
                packet.data.dport,
                packet.p
            )
        elif packet.p == dpkt.ip.IP_PROTO_ICMP:
            return "%s%s%s" % (
                packet.src,
                packet.dst,
                packet.p
            )
    elif ip_version == socket.AF_INET6: 
        return packet.v_fc_flow
    raise ValueError(ERR_INVALID_PARAMETER % packet)

def make_icmp_reply(src_ip, dst_ip, ttl, icmp_data, icmp_type, icmp_code):
    """
    \brief Craft a fake traceroute ICMP reply
    \param src_ip The source of the ICMP reply (binary)
    \param dst_ip The destination of the ICMP reply (binary)
    \param ttl The TTL of the ICMP reply
    \param icmp_data The data carried by the ICMP message
    \param icmp_type The ICMP code of the reply
    \param icmp_code The ICMP code of the reply
    \return A dpkt.IP6 or dpkt.IP instance (according to the IP version of src_ip)
    """
    ip_version = ip_get_version(src_ip)

    if ip_version == socket.AF_INET6:

        icmp = ICMP6(
            type = icmp_type,
            code = icmp_code,
            data = icmp_data
        )

        return IP6(
            src  = src_ip, 
            dst  = dst_ip, 
            nxt  = dpkt.ip.IP_PROTO_ICMP6,
            hlim = ttl,
            plen = len(icmp),
            data = icmp
        )

    elif ip_version == socket.AF_INET:
        icmp = ICMP(
            type = icmp_type,
            code = icmp_code,
            data = icmp_data
        )

        return IP(
            src   = src_ip,
            dst   = dst_ip, 
            p     = dpkt.ip.IP_PROTO_ICMP,
            ttl   = ttl,
            len   = len(icmp),
            data  = icmp 
        )

    raise ValueError("Unknown IP version")

#-----------------------------------------------------------------
# Functions called when a packet is captured
#-----------------------------------------------------------------

def make_reply(probe_packet):
    """
    \brief Craft an IPv4/ICMP or IPv6/ICMPv6 reply according to
        a probe packet.
    \param probe_packet The dpkt.IP or dpkt.IP6 instance related
        to the probe packet.
    \return A string (buffer) containing the bytes corresponding
        to the emulated ICMP reply. 
    """
    ttl = packet_get_ttl(probe_packet)
    assert ttl > 0
    ip_version = packet_get_version(probe_packet)
    if ip_version not in [socket.AF_INET, socket.AF_INET6]:
        raise ValueError(ERR_INVALID_PARAMETER % packet)

    flow_id = packet_get_flow_id(probe_packet)
    dst = ip_to_str(packet_get_dst_ip(probe_packet))

    icmp_data = None
    fake_ip = "start"
    succ = hopmap[dst]
    while ttl > 0:
        fake_ip = succ[fake_ip]

        if len(fake_ip) == 1:
            fake_ip = fake_ip[0]
        else:
            # Several nodes for this TTL, emulate a per-flow load balancer
            fake_ip = fake_ip[zlib.crc32(fake_ip[0] + flow_id) % len(fake_ip)]
            
        if fake_ip == "end":
            fake_ip = dst
            if ip_version == socket.AF_INET6:
                icmp_data = ICMP6.Unreach()
                icmp_type = dpkt.icmp6.ICMP6_DST_UNREACH # 1 (destination unreachable)
                icmp_code = 4                            # 4 (port unreachable) (http://en.wikipedia.org/wiki/ICMPv6)
            elif ip_version == socket.AF_INET:
                # http://www.networksorcery.com/enp/protocol/icmp/msg3.htm
                icmp_data = ICMP.Unreach()
                icmp_type = dpkt.icmp.ICMP_UNREACH       # 3 (destination unreachable)
                icmp_code = dpkt.icmp.ICMP_UNREACH_PORT  # 3 (bad port) 
            break
        ttl -= 1

    # No ICMP packet crafted in the loop, so prepare a ICMP-TimeExceed packet
    if not icmp_data:
        if ip_version == socket.AF_INET6:
            icmp_data = ICMP6.TimeExceed()
            icmp_type = dpkt.icmp6.ICMP6_TIME_EXCEEDED   # 3
            icmp_code = 0                                # 0 (hop limit exceeded in transit)
        elif ip_version == socket.AF_INET:
            icmp_data = ICMP.TimeExceed()
            icmp_type = dpkt.icmp.ICMP_TIMEXCEED         # 11 (time exceed)
            icmp_code = dpkt.icmp.ICMP_TIMEXCEED_INTRANS # 0  (in transit)
    
    # Craft ICMP data (common to ICMP unreach and time exceed) 
    # - Tweak the probe packet: it has been received with TTL == 1
    packet_set_ttl(probe_packet, 1) # ?

    if ip_version == socket.AF_INET6:
        # http://www.ietf.org/rfc/rfc2463.txt
        # In data: As much of invoking packet as will fit without the ICMPv6 packet
        # exceeding the minimum IPv6 MTU [IPv6]. The MTU is often set to 1280 which
        # is enough to contain the whole probe packet.
        icmp_data.data = str(probe_packet)[:]
    elif ip_version == socket.AF_INET:
        # - Put IP Header + first 8 bytes of Original Datagram's Data
        # http://www.networksorcery.com/enp/protocol/icmp/msg11.htm
		#icmp_data.data = str(probe_packet)[:(probe_packet.__hdr_len__ + 8)] 
		icmp_data.data = str(probe_packet)[:]

    print "Building fake answer %s -> %s" % (
        fake_ip,
        ip_to_str(packet_get_src_ip(probe_packet)),
    )
    
    icmp_reply = make_icmp_reply(
        str_to_ip(fake_ip),                                        # src_ip
        packet_get_src_ip(probe_packet),                           # dst_ip
        dpkt.ip.IP_TTL_DEFAULT + 1 - packet_get_ttl(probe_packet), # ttl
        icmp_data,
        icmp_type,
        icmp_code
    )

    return str(icmp_reply)

def cb4(i, probe_packet_bin):
    """
    \brief This callback is call whenever a IPv4 packet is captured by fakeroute
    \param probe_packet_bin The captured packet
    Note: this function uses the following global variables:
        sock4  : The IPv4 socket managed by fakeroute
        hopmap : Network topologies emulated by fakeroute
    \return 1 if the packet is dropped
            0 otherwise
    """
    probe_packet = IP(nfq_get_payload(probe_packet_bin))
    probe_reply_bin = make_reply(probe_packet)
    sock4.sendto(probe_reply_bin, TARGET_IPV4)
    nfq_drop(probe_packet_bin)
    return 0

def cb6(i, probe_packet_bin):
    """
    \brief This callback is call whenever a IPv6 packet is captured by fakeroute
    \param probe_packet_bin The captured packet
    Note: this function uses the following global variables:
        sock6  : The IPv4 socket managed by fakeroute
        hopmap : Network topologies emulated by fakeroute
    \return 1 if the packet is dropped
            0 otherwise
    """
    probe_packet = IP6(nfq_get_payload(probe_packet_bin))
    probe_reply_bin = make_reply(probe_packet)
    sock6.sendto(probe_reply_bin, TARGET_IPV6)
    nfq_drop(probe_packet_bin)
    return 0

#-----------------------------------------------------------------
# Netfilter / iptables 
#-----------------------------------------------------------------

def check_netfilter():
    """
    \return True iif python-netfilter is properly installed
    """
    try:
        from netfilter.rule  import Rule, Target
        from netfilter.table import Table
        return True
    except ImportError:
        print "E: Missing package. Please install python-netfilter"
    except Exception, why:
        print why
    return False

def update_rules(ips, is_ipv6, rules):
    """
    \brief Enrich a list of iptable rules in order to capture the traffic sent
        toward a list of target IPs.
    \param is_ipv6 A boolean set to True iif ips only contains IPv6 addresses.
    \param ips The IPs to be captured. This set must contains either only IPv4
        or either IPv6
    \param rules The list of iptables rules  to enrich. You may pass an
        empty list.
    """
    from netfilter.rule  import Rule, Target
    from netfilter.table import Table

    table = Table("filter", auto_commit = False, ipv6 = is_ipv6)
    queue_num = QUEUE_NUM_IPV6 if is_ipv6 else QUEUE_NUM_IPV4
    for ip in ips:
        rule = Rule(
            destination = ip,
            jump = Target("NFQUEUE", "--queue-num %s" % queue_num)
        )
        rules.append(rule)
        table.append_rule("OUTPUT", rule)
    table.commit()

def delete_rules(rules, is_ipv6):
    """
    \brief Delete some rules from iptables
    \param rules A list of rules to remove
    \param is_ipv6 A boolean set to True iif ips only contains IPv6 addresses.
    \return True iif at least one rule has been removed
    """
    from netfilter.table import Table, IptablesError

    if not rules:
        return False

    print INF_DEL_IPTABLES % ("6" if is_ipv6 else "")
    table = Table("filter", ipv6 = is_ipv6)
    for rule in rules: 
        try:
            table.delete_rule("OUTPUT", rule)
        except IptablesError, why:
            # This iptables rule has probably been removed manually...
            print why
            pass
    return True

#-----------------------------------------------------------------
# Queue threads
# We need to run in two separate threads the IPv4 and IPv6 packet 
# handling, otherwise it does not work fine.
#-----------------------------------------------------------------

class ThreadQueue(threading.Thread):
    
    def __init__(self, is_ipv6):
        threading.Thread.__init__(self)
        self.is_ipv6 = is_ipv6
        self.queue = queue_make(
            cb6 if self.is_ipv6 else cb4,
            self.is_ipv6
        )

    def run(self):
        while True:
            print INF_RUNNING
            try:
                queue_run(self.queue)
            except Exception, why:
                print why

    def join(self, timeout = None):
        queue_close(self.queue, self.is_ipv6)
        threading.Thread.join(self, timeout)

#-----------------------------------------------------------------
# Main program
#-----------------------------------------------------------------

def main(has_ipv6):
    # Configuration path
    cfg_path = get_cfg_path()

    # Check whether at least one directory storing network topologies exists
    if not cfg_path:
        print ERR_NO_CONF % CONFIGPATH
        sys.exit(-1)

    # List of handled IP addresses
    handled4, handled6 = get_handled_files(cfg_path)

    if WITH_THREADS:
        # Overrides has_ipv6 parameter passed to main()
        has_ipv4 = len(handled4) > 0
        has_ipv6 = len(handled6) > 0
    else:
        has_ipv4 = (not has_ipv6) and (len(handled4) > 0)

    if has_ipv4: print INF_RUNNING_IPV4
    if has_ipv6: print INF_RUNNING_IPV6

    if has_ipv4: update_hopmap(handled4, hopmap)
    if has_ipv6: update_hopmap(handled6, hopmap)

    # iptables
    rules4, rules6 = [], []

    if not check_netfilter():
        print WNG_NETFILTER 
        for ip4 in sorted(handled4.keys()):
            print "    iptables  -A OUTPUT -d %s -j QUEUE --queue-num %s" % (ip4, QUEUE_NUM_IPV4)
        for ip6 in sorted(handled6.keys()):
            print "    ip6tables -A OUTPUT -d %s -j QUEUE --queue-num %s" % (ip6, QUEUE_NUM_IPV6)
    else:
        # Adding iptables rules
        print INF_ADD_IPTABLES
        if has_ipv4: update_rules(handled4.keys(), False, rules4)
        if has_ipv6: update_rules(handled6.keys(), True,  rules6)

    if WITH_THREADS:
        # This does not work well :(
        if has_ipv4: t4 = ThreadQueue(False)
        if has_ipv6: t6 = ThreadQueue(True)
        try:
            if has_ipv4:
                t4.setDaemon(True)
                t4.start()
            if has_ipv6:
                t6.setDaemon(True)
                t6.start()
        except KeyboardInterrupt:
            if has_ipv4: t4.join(2)
            if has_ipv6: t6.join(2)
    else:
        if has_ipv4: q4 = queue_make(cb4, False)
        if has_ipv6: q6 = queue_make(cb6, True)

        print INF_RUNNING
        try:
            if has_ipv4: queue_run(q4)
            if has_ipv6: queue_run(q6)
        except KeyboardInterrupt:
            if has_ipv4: queue_close(q4, False)
            if has_ipv6: queue_close(q6, True)

    # Removing iptables rules
    print INF_TERMINATED 
    if check_netfilter():
        if has_ipv4: delete_rules(rules4, False)
        if has_ipv6: delete_rules(rules6, True)
    else:
        print WNG_CLEAN_IPTABLES

if __name__ == "__main__":
    # TODO Fakeroute should be able to run simultaneously IPv4 and IPv6
    # probe handling (WITH_THREADS == True) but it does not work fine.
    # For the moment, a fakeroute call only manage either IPv4 handling
    # (-4) or either IPv6 handling (-6) and so WITH_THREADS is set to False
    if WITH_THREADS:
        main(False) # dummy parameter
    else:
        has_ipv6 = False 
        if len(sys.argv) == 1:
            print INF_RUNNING_DEFAULT % (sys.argv[0], sys.argv[0])
        elif len(sys.argv) == 2:
            if sys.argv[1] == "-6":
                has_ipv6 = True 
            elif sys.argv[1] == "-4":
                has_ipv6 = False 
            else:
                sys.stderr.write("usage: %r [{-4|-6}]" % argv[0])
                sys.exit(-1) 
        main(has_ipv6)
